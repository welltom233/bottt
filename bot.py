all_links.add(link)
            else:
                duplicate_count += 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    history_links[str(chat_id)] = list(all_links)
    save_history(history_links)

    del files_data[chat_id]  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    if not all_links:
        await bot.send_message(chat_id, "‚ö†Ô∏è –í —Ñ–∞–π–ª–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫!")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    result_text = "\n".join(all_links)
    if len(result_text) > 4000:
        parts = [result_text[i:i+4000] for i in range(0, len(result_text), 4000)]
        for part in parts:
            await bot.send_message(chat_id, part)
    else:
        await bot.send_message(chat_id, result_text)

    elapsed_time = round(time.time() - start_time, 2)

    # –û—Ç—á—ë—Ç
    report = (
        f"üìä **–û—Ç—á—ë—Ç:**\n"
        f"üîπ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {file_count}\n"
        f"üîπ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}\n"
        f"üîπ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {duplicate_count}\n"
        f"üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {len(all_links)}\n"
        f"‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed_time} —Å–µ–∫."
    )
    await bot.send_message(chat_id, report, parse_mode="Markdown")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    while True:
        try:
            await bot.polling(non_stop=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(5)  # –ï—Å–ª–∏ –±–æ—Ç —É–ø–∞–ª, –∂–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞

if name == "__main__":
    asyncio.run(main())
