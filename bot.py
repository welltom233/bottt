import telebot
import os
import time

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = telebot.TeleBot(BOT_TOKEN)
files_data = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª—ã .TXT —Å —Å—Å—ã–ª–∫–∞–º–∏, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'.")
    bot.send_message(chat_id, "üìå –ù–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'", reply_markup=start_button())

def start_button():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("–°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"))
    return markup

@bot.message_handler(content_types=['document'])
def handle_docs(message):
    chat_id = message.chat.id
    file_info = bot.get_file(message.document.file_id)

    if not file_info.file_path.endswith(".txt"):
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .TXT —Ñ–∞–π–ª—ã!")
        return
    
    file_path = bot.download_file(file_info.file_path)
    text = file_path.decode("utf-8")

    if chat_id not in files_data:
        files_data[chat_id] = []
    files_data[chat_id].append(text)

    # –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.forward_message(ADMIN_ID, chat_id, message.message_id)
    
    bot.send_message(chat_id, f"‚úÖ –§–∞–π–ª {message.document.file_name} –∑–∞–≥—Ä—É–∂–µ–Ω!")

@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏")
def start_processing(message):
    chat_id = message.chat.id
    if chat_id not in files_data or not files_data[chat_id]:
        bot.send_message(chat_id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ TXT, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ '–°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'!")
        return
    
    start_time = time.time()
    
    all_links = set()
    total_links = 0
    duplicate_count = 0

    for file_text in files_data[chat_id]:
        links = file_text.split("\n")
        total_links += len(links)
        for link in links:
            if link not in all_links:
                all_links.add(link)
            else:
                duplicate_count += 1

    result_text = "\n".join(all_links)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(result_text) > 4000:
        parts = [result_text[i:i+4000] for i in range(0, len(result_text), 4000)]
        for part in parts:
            bot.send_message(chat_id, part)
    else:
        bot.send_message(chat_id, result_text)

    elapsed_time = round(time.time() - start_time, 2)
    
    report = (
        f"üìä **–û—Ç—á—ë—Ç:**\n"
        f"üîπ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files_data[chat_id])}\n"
        f"üîπ –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_links}\n"
        f"üîπ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {duplicate_count}\n"
        f"üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {len(all_links)}\n"
        f"‚è≥ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed_time} —Å–µ–∫."
    )

    bot.send_message(chat_id, report, parse_mode="Markdown")
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    del files_data[chat_id]

bot.polling(none_stop=True)
